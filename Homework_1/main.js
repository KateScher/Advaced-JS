/* Задание 1
• Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.
• Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:
{
title: "Название альбома",
artist: "Исполнитель",
year: "Год выпуска"
}
• Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
• Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)*/

const musicCollection = [
  { title: "Гранатовый альбом", artist: "Сплин", year: "2002" },
  { title: "Vinyl #2", artist: "Zivert", year: "2021" },
  { title: "Idea 22", artist: "Gibran Alcocer", year: "2022" },
];

musicCollection[Symbol.iterator] = function () {
  return {
    current: 0,
    to: this.length,
    next() {
      return this.current < this.to
        ? { done: false, value: musicCollection[this.current++] }
        : { done: true };
    },
  };
};

for (const albom of musicCollection) {
  console.log(`Title: ${albom.title}, Artist: ${albom.artist} (${albom.year})`);
}

/* Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
Необходимо создать систему управления этими заказами, которая позволит:
• Отслеживать, какой повар готовит какое блюдо.
• Записывать, какие блюда заказал каждый клиент.
Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.
                    _Повара и их специализации:_
Виктор - специализация: Пицца.
Ольга - специализация: Суши.
Дмитрий - специализация: Десерты.
                         _Блюда и их повара:_
Пицца "Маргарита" - повар: Виктор.
Пицца "Пепперони" - повар: Виктор.
Суши "Филадельфия" - повар: Ольга.
Суши "Калифорния" - повар: Ольга.
Тирамису - повар: Дмитрий.
Чизкейк - повар: Дмитрий.
                               _Заказы:_
Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
Клиент Ирина заказала: Чизкейк.*/

let cooks = new Map();
cooks.set("Виктор", "Пицца").set("Ольга", "Суши").set("Дмитрий", "Десерты");

console.log(`Виктор - специализация: ${cooks.get("Виктор")}`);
console.log(`Ольга - специализация: ${cooks.get("Ольга")}`);
console.log(`Дмитрий - специализация: ${cooks.get("Дмитрий")}`);
console.log();

// Блюда и повара
let dishes = new Map();
dishes
  .set("Пицца 'Маргарита'", "Виктор")
  .set("Пицца 'Пепперони'", "Виктор")
  .set("Суши 'Филадельфия'", "Ольга")
  .set("Суши 'Калифорния'", "Ольга")
  .set("Тирамису", "Дмитрий")
  .set("Чизкейк", "Дмитрий");

console.log(
  `Пиццу 'Маргарита' приготовил повар: ${dishes.get("Пицца 'Маргарита'")}`
);
console.log(
  `Суши 'Калифорния' приготовил повар: ${dishes.get("Суши 'Калифорния'")}`
);
console.log(`Чизкейк приготовил повар: ${dishes.get("Чизкейк")}`);
console.log();

// Заказы:
let orders = new Map(); //заказы всех клиентов

//заказ первого клиента
let client1 = { name: "Арина" };
let clientOrder1 = new Set();
clientOrder1.add("Пицца 'Маргарита'").add(" Чизкейк");

//заказ второго клиента
let client2 = { name: "Екатерина" };
let clientOrder2 = new Set();
clientOrder2.add("Суши 'Филадельфия'").add(" Тирамису");

//заказ третьего клиента
let client3 = { name: "Андрей" };
let clientOrder3 = new Set();
clientOrder3.add("Пицца 'Пепперони'");

orders
  .set(client1, clientOrder1) // добавляем заказы клиентов в список
  .set(client2, clientOrder2)
  .set(client3, clientOrder3);

console.log(`Клиент ${client1.name} заказала: ${[...orders.get(client1)]}`);
console.log(`Клиент ${client2.name} заказала: ${[...orders.get(client2)]}`);
console.log(`Клиент ${client3.name} заказал: ${[...orders.get(client3)]}`);
